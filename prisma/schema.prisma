// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// 1. Datasource: Specifies your database connection.
// I'm using PostgreSQL here, but you can switch to mysql, sqlite, etc.
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL") // Loads from your .env file
}

// 2. Generator: Specifies that you want to generate Prisma Client.
generator client {
  provider = "prisma-client-js"
}

// 3. Data Models: Defines your application's schema.

// Model for user authentication and identity
model User {
  id                 String            @id @default(cuid())
  email              String            @unique
  name               String?
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @updatedAt

  // Flag to check if the user has completed the onboarding process
  onboardingComplete Boolean           @default(false)

  // --- New fields for usage tracking ---
  // Number of free content generations remaining.
  credits            Int               @default(10)

  // --- Relationships ---
  // One-to-one relationship with their business profile
  businessProfile    BusinessProfile?
  // One-to-many relationship with their generated content
  generatedContents  GeneratedContent[]
  // One-to-one relationship with their subscription
  subscription       Subscription?
}

// --- New Enums and Models for Subscriptions ---

// Enum for subscription plans
enum Plan {
  FREE
  PREMIUM
}

// Enum for subscription status from a payment provider like Stripe
enum SubscriptionStatus {
  ACTIVE
  CANCELED
  PAST_DUE
  INCOMPLETE
}

// Model for user subscriptions, designed to integrate with Stripe
model Subscription {
  id                   String             @id @default(cuid())
  userId               String             @unique
  user                 User               @relation(fields: [userId], references: [id])
  plan                 Plan               @default(FREE)
  status               SubscriptionStatus @default(INCOMPLETE)
  currentPeriodStart   DateTime?
  currentPeriodEnd     DateTime?
  stripeCustomerId     String?            @unique @map("stripe_customer_id")
  stripeSubscriptionId String?            @unique @map("stripe_subscription_id")
  stripePriceId        String?            @map("stripe_price_id")
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @updatedAt
}

// Model for the onboarding process, capturing business details
model BusinessProfile {
  id              String   @id @default(cuid())
  businessName    String
  industry        String?
  targetAudience  String?
  toneOfVoice     String   @default("Professional") // e.g., "Witty", "Formal", "Casual"
  goals           String?  // e.g., "Increase brand awareness"
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // --- Relationships ---
  // Explicit one-to-one relationship back to the User
  user            User     @relation(fields: [userId], references: [id])
  userId          String   @unique // Foreign key
}

// Enum for the different types of content that can be generated
enum ContentType {
  STRATEGY
  AD_COPY
  SOCIAL_MEDIA_POST
  BLOG_POST
}

// Model to store the content generated by the AI
model GeneratedContent {
  id        String          @id @default(cuid())
  type      ContentType     // The type of content generated
  prompt    String          // The user's original prompt
  content   String          @db.Text // The AI-generated content
  createdAt DateTime        @default(now())

  // --- Relationships ---
  user      User            @relation(fields: [userId], references: [id])
  userId    String          // Foreign key
  analytics ContentAnalytics? // Each piece of content can have analytics
}

// Model to store analytics for each piece of content
model ContentAnalytics {
  id               String           @id @default(cuid())
  views            Int              @default(0)
  clicks           Int              @default(0)
  engagementRate   Float            @default(0)

  // --- Relationships ---
  content          GeneratedContent @relation(fields: [contentId], references: [id])
  contentId        String           @unique // Foreign key
}
